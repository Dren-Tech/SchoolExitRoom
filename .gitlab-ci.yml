# This file is a template, and might need editing before it works on your project.
# Select image from https://hub.docker.com/_/php/
image: drentech/caddy-php

# Select what we should cache between builds
cache:
  paths:
    - vendor/
    - node_modules/
    - public/build/
    - public/bundles/

stages:
  - pre-build
  - build
  - test
  - release

frontend_build:
  stage: pre-build
  image: node:lts
  script:
    - yarn install
    - yarn encore prod

composer:
  stage: pre-build
  script:
    - rm -rf var/cache
    - composer install

docker-build-master:
  stage: build
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

docker-build-production:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$(git describe --exact-match --abbrev=0 --tags)" .
    - docker push "$CI_REGISTRY_IMAGE:$(git describe --exact-match --abbrev=0 --tags)"
  only:
    - production
  
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - echo 'running release_job'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'New version $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'

docker-build:
  stage: build
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  except:
    - master
    - production

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.
#test:
#  script:
#    - vendor/bin/phpunit --configuration phpunit.xml --coverage-text --colors=never
